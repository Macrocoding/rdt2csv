lifeset CORE;

phase generateValidation = 50;

in phase generateValidation {
	do {
		// Prepare the file names
		var FilePath cFileName;
		var FilePath hFileName;
		cFileName.parse (outputName.text+"_valid");
		hFileName.parse (outputName.text+"_valid");
		cFileName.replaceExtension ("c");
		hFileName.replaceExtension ("h");
		
		// Open the files
		var FileOutStream cFile (cFileName);
		var FileOutStream hFile (hFileName);
		system().msg << "Generating " << cFileName << endl;
		system().msg << "Generating " << hFileName << endl;

		// Write the headers
		cFile << %F
%f			%F%1/* Generated by Macrocoder - do not edit */
%f%0			%F%1#define _CRT_SECURE_NO_WARNINGS
%f%0			%F%1#include "%0«hFileName.%fgetTopNamePart ()%F»%1"
%f%0			%F%1#include <string.h>
%f%0			%F%1#include "binlib.h"
%f%0			%F%1#include "crc.h"
%f%0			%F%1#include <assert.h>
%f%0		;
		
		var String ifndefText = %FhFileName.%fgetTopNamePart ().convertToIdentifier ();
		hFile << %F
%f			%F%1/* Generated by Macrocoder - do not edit */
%f%0			%F%1#ifndef %0«ifndefText»%1
%f%0			%F%1#define %0«ifndefText»%1
%f%0			%F%1#include "%0«getInclude("")»%1"
%f%0			%F%1#include "md380_tools.h"
%f%0			%F%1
%f%0			%F%1/* Validate an entire container */
%f%0			%F%1extern int validateContainer(const TRDTFile* container, ReportErrorFunc reportErrorFunc, void* reportErrorParam);
%f%0		;
		generateValidationFunction (cFile);
		
		// Write the footers
		hFile << endl <<
			%F%1#endif
%f%0		%F;%f
	}
	
	shared Void generateValidationFunction (out TextStream cFile) const;
}

extend class Record {
	in phase generateValidation {
		shared Void generateValidationFunction (out TextStream cFile) const;
	}
}

impl generateValidationFunction {
	var Int i;
	for (i=0; i<recordsMap.count (); i++) {
		recordsMap.getAt(i).generateValidationFunction(cFile);
	}

	cFile <<
		%F%1/* Validate an entire container */
%f%0		%F%1int validateContainer(const TRDTFile* container, ReportErrorFunc reportErrorFunc, void* reportErrorParam)
%f%0		%F%1{
%f%0		%F%1	int noOfViolations = 0;
%f%0		%F%1	unsigned i;
%f%0	%F;
	cFile.%fincIndent ()%F;
%f	%F
%f	for (i=0; i<recordsMap.count (); i++) {
		var String recordId = recordsMap.getAt(i).recordId.text;
		if (recordsMap.getAt(i).count.value > 1) {
			cFile << endl <<
				%F%1for (i=0; i<container->%0«recordId»%1_COUNT; i++) {
%f%0				%F%1	noOfViolations += validate_%0«recordId»%1 (container, container->%0«recordId»%1+i, i, reportErrorFunc, reportErrorParam);
%f%0				%F%1}
%f%0			;
		}
		else {
			cFile << endl <<
				%F%1noOfViolations += validate_%0«recordId»%1 (container, &container->%0«recordId»%1, -1, reportErrorFunc, reportErrorParam);
%f%0			;
		}
	}
	%F
	cFile.%fdecIndent ()%F;
%f	%FcFile << 
%f	%F	%1	return noOfViolations;
%f%0		%F%1}
%f%0	%F;
%f	
}

impl Record::generateValidationFunction {
	cFile << endl <<
		%F%1/* Validate record %0«recordId»%1 */
%f%0		%F%1static int validate_%0«recordId»%1 (const TRDTFile* container, const T_%0«recordId»%1* rec, int recordLine, ReportErrorFunc reportErrorFunc, void* reportErrorParam)
%f%0		%F%1{
%f%0		%F%1	int noOfViolations = 0;
%f%0		%F%1	NOWARN_UNUSED(container);
%f%0		%F%1	NOWARN_UNUSED(rec);
%f%0		%F%1	NOWARN_UNUSED(recordLine);
%f%0		%F%1	NOWARN_UNUSED(reportErrorFunc);
%f%0		%F%1	NOWARN_UNUSED(reportErrorParam);
%f%0	%F;
	cFile.%fincIndent ()%F;
%f	%Fvar Int i;
%f	%Ffor (i=0;%f i<fields.count (); i++) {
		if (fields.get(i).validationCode.text.length () > 0) {
			cFile << endl <<
				%F%1/* FIELD: %0«fields.get(i).fieldId»%1 */
%f%0				%F%1#define REPORT(s) (noOfViolations++, reportErrorFunc(reportErrorParam, "%0«recordId»%1", recordLine, "%0«fields.get(i).fieldId»%1", s))
%f%0				«fields.get(i).validationCode»%1
%0				%F%1#undef REPORT
%f%0			%F;%f
		}
	}
	
%F	cFile.%fdecIndent ()%F;
%f	%FcFile << endl <<
%f	%F	%1	return noOfViolations;
%f%0		%F%1}
%f%0	%F;
%f}
