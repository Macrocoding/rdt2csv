lifeset CORE;

phase generate = 20;

String getInclude (String suffix) const {
	var FilePath hFileName;
	hFileName.parse (outputName.text+suffix);
	hFileName.replaceExtension ("h");
	return %FhFileName.%fgetTopNamePart ();
}

in phase generate do {
	// Prepare the file names
	var FilePath cFileName;
	var FilePath hFileName;
	cFileName.parse (outputName.text);
	hFileName.parse (outputName.text);
	cFileName.replaceExtension ("c");
	hFileName.replaceExtension ("h");
	
	// Open the files
	var FileOutStream cFile (cFileName);
	var FileOutStream hFile (hFileName);

	// Write the headers
	cFile << %F
%f		%F%1/* Generated by Macrocoder - do not edit */
%f%0		%F%1#define _CRT_SECURE_NO_WARNINGS
%f%0		%F%1#include "%0«hFileName.%fgetTopNamePart ()%F»%1"
%f%0		%F%1#include "crc.h"
%f%0		%F%1#include "md380_tools.h"
%f%0		%F%1#include <assert.h>
%f%0		%F%1#include <stdio.h>
%f%0	;
	
	var String ifndefText = %FhFileName.%fgetTopNamePart ().convertToIdentifier ();
	hFile << %F
%f		%F%1/* Generated by Macrocoder - do not edit */
%f%0		%F%1#ifndef %0«ifndefText»%1
%f%0		%F%1#define %0«ifndefText»%1
%f%0		%F%1#include "binlib.h"
%f%0		%F%1#include "csv.h"
%f%0		%F%1
%f%0		%F%1/*============================================================================
%f%0		%F%1	Structure used to describe each enumeration in a field
%f%0		%F%1============================================================================*/
%f%0		%F%1typedef struct {
%f%0		%F%1	/* CRC-32 of the enumeration name (calculated all lower case) */
%f%0		%F%1	unsigned enumNameCRC;
%f%0		%F%1	
%f%0		%F%1	/* Name of the enumeration */
%f%0		%F%1	const char* enumName;
%f%0		%F%1	
%f%0		%F%1	/* Value associated to this enumeration */
%f%0		%F%1	t_numeric enumValue;
%f%0		%F%1	
%f%0		%F%1} FieldEnumerator;
%f%0		%F%1 
%f%0		%F%1/*============================================================================
%f%0		%F%1	Structure used to describe each field in a record.
%f%0		%F%1============================================================================*/
%f%0		%F%1typedef struct {
%f%0		%F%1	/* CRC-32 of the field name (calculated all lower case) */
%f%0		%F%1	unsigned fieldNameCRC;
%f%0		%F%1
%f%0		%F%1	/* Type of the field */
%f%0		%F%1	BinType	fieldType;
%f%0		%F%1	
%f%0		%F%1	/* Name of the field */
%f%0		%F%1	const char* fieldName;
%f%0		%F%1	
%f%0		%F%1	/* Number of enumerations (0 if not enumerated) */
%f%0		%F%1	unsigned enumCount;
%f%0		%F%1	
%f%0		%F%1	/* Pointer to the array of enumerations for this field or NULL if none */
%f%0		%F%1	const FieldEnumerator* fieldEnumerators;
%f%0		%F%1	
%f%0		%F%1} FieldDescriptor;
%0		%1
%f%0		%F%1
%f%0		%F%1#define FILE_SIZE_%0«globalType»%1 %0«binaryFileSize»%1
%f%0	;
	
	// Write the record structures
	var Int i;
	for (i=0; i<recordsMap.count (); i++) {
		recordsMap.getAt (i).genStruct (hFile);
		recordsMap.getAt (i).genFuncH (hFile);
		recordsMap.getAt (i).genFuncC (cFile);
		recordsMap.getAt (i).genFieldDescriptor (cFile);
	}
	
	genGlobalStruct (hFile);
	genGlobalFuncs (cFile);

	// Write the footers
	hFile << endl <<
		%F%1#endif
%f%0	%F;%f
}