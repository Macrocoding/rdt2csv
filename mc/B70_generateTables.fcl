lifeset CORE;

phase generateTables = 70;

in phase generateTables {
	do {
		// Prepare the file names
		var FilePath cFileName;
		var FilePath hFileName;
		cFileName.parse (outputName.text+"_tables");
		hFileName.parse (outputName.text+"_tables");
		cFileName.replaceExtension ("c");
		hFileName.replaceExtension ("h");
		
		// Open the files
		var FileOutStream cFile (cFileName);
		var FileOutStream hFile (hFileName);
		system().msg << "Generating " << cFileName << endl;
		system().msg << "Generating " << hFileName << endl;

		// Write the headers
		cFile << %F
%f			%F%1/* Generated by Macrocoder - do not edit */
%f%0			%F%1#define _CRT_SECURE_NO_WARNINGS
%f%0			%F%1#include "%0«hFileName.%fgetTopNamePart ()%F»%1"
%f%0			%F%1#include <string.h>
%f%0			%F%1#include "binlib.h"
%f%0			%F%1#include "crc.h"
%f%0			%F%1#include <assert.h>
%f%0			%F%1#include <stdio.h>
%f%0		;
		
		var String ifndefText = %FhFileName.%fgetTopNamePart ().convertToIdentifier ();
		hFile << %F
%f			%F%1/* Generated by Macrocoder - do not edit */
%f%0			%F%1#ifndef %0«ifndefText»%1
%f%0			%F%1#define %0«ifndefText»%1
%f%0			%F%1#include "%0«getInclude("")»%1"
%f%0			%F%1#include "%0«getInclude("_valid")»%1"
%f%0			%F%1
%f%0			%F%1#ifdef __cplusplus
%f%0			%F%1extern "C" {
%f%0			%F%1#endif
%f%0			%F%1
%f%0			%F%1/*==================================================================
%f%0			%F%1	LOOKUP TABLES
%f%0			%F%1==================================================================*/
%f%0			%F%1typedef struct {
%f%0		;
		generateLookupTables (hFile);
		hFile <<
			%F%1
%f%0			%F%1} MD380Tables;
%f%0			%F%1
%f%0			%F%1extern void INIT_MD380Tables (MD380Tables* tables);
%f%0			%F%1extern void FREE_MD380Tables (MD380Tables* tables);
%f%0			%F%1
%f%0			%F%1/*==================================================================
%f%0			%F%1	Register a TRDTFile. It register the channel/zone/contact/etc.
%f%0			%F%1	names looking for dupes.
%f%0			%F%1	
%f%0			%F%1	Writes errors on ReportErrorFunc
%f%0			%F%1==================================================================*/
%f%0			%F%1extern int registerContainerNames (MD380Tables* tab, const TRDTFile* container, ReportErrorFunc reportErrorFunc, void* reportErrorParam);
%f%0			%F%1
%f%0			%F%1#ifdef __cplusplus
%f%0			%F%1}
%f%0			%F%1#endif
%f%0			%F%1
%f%0			%F%1
%f%0			%F%1#endif
%f%0		%F;%f
		generateLookupTablesC (cFile);
	}
	
	shared Void generateLookupTables (out TextStream hFile) const;
	shared Void generateLookupTablesC (out TextStream cFile) const;
}

impl generateLookupTables {
	var Int i;
	hFile.incIndent ();
	for (i=0; i<recordsMap.count(); i++) {
		if (recordsMap.getAt(i).isReferenced) {
			var String recId = recordsMap.getAt(i).recordId.text;
			hFile << endl <<
				%F%1/* %0«recId»%1 */
%f%0				%F%1LookupTable TAB_%0«recId»%1;
%f%0			;
		}
	}
	hFile.decIndent ();
}

impl generateLookupTablesC {
	var Int i;

	//-----------------------------------------------------------
	// INIT_MD380Tables
	//-----------------------------------------------------------
	cFile << endl <<
		%F%1void INIT_MD380Tables (MD380Tables* tables)
%f%0		%F%1{
%f%0	;
	for (i=0; i<recordsMap.count(); i++) {
		if (recordsMap.getAt(i).isReferenced) {
			var String recId = recordsMap.getAt(i).recordId.text;
			cFile << %F%1	INIT_LookupTable (&tables->TAB_%0«recId»%1, COUNT_%0«recId»%1);%f%0 << endl;
		}
	}
	cFile << endl <<
		%F%1}
%f%0	;

	//-----------------------------------------------------------
	// RESET_MD380Tables
	//-----------------------------------------------------------
	cFile << endl <<
		%F%1void RESET_MD380Tables (MD380Tables* tables)
%f%0		%F%1{
%f%0	;
	for (i=0; i<recordsMap.count(); i++) {
		if (recordsMap.getAt(i).isReferenced) {
			var String recId = recordsMap.getAt(i).recordId.text;
			cFile << %F%1	RESET_LookupTable (&tables->TAB_%0«recId»%1);%f%0 << endl;
		}
	}
	cFile << endl <<
		%F%1}
%f%0	;

	//-----------------------------------------------------------
	// FREE_MD380Tables
	//-----------------------------------------------------------
	cFile << endl <<
		%F%1void FREE_MD380Tables (MD380Tables* tables)
%f%0		%F%1{
%f%0	;
	for (i=0; i<recordsMap.count(); i++) {
		if (recordsMap.getAt(i).isReferenced) {
			var String recId = recordsMap.getAt(i).recordId.text;
			cFile << %F%1	FREE_LookupTable (&tables->TAB_%0«recId»%1);%f%0 << endl;
		}
	}
	cFile << endl <<
		%F%1}
%f%0	;

	//-----------------------------------------------------------
	// registerContainerNames
	//-----------------------------------------------------------
	cFile << endl <<
		%F%1/*==================================================================
%f%0		%F%1	Register a TRDTFile. It register the channel/zone/contact/etc.
%f%0		%F%1	names looking for dupes.
%f%0		%F%1	
%f%0		%F%1	Writes errors on ReportErrorFunc.
%f%0		%F%1	Returns number of errors.
%f%0		%F%1==================================================================*/
%f%0		%F%1int registerContainerNames (MD380Tables* tab, const TRDTFile* container, ReportErrorFunc reportErrorFunc, void* reportErrorParam)
%f%0		%F%1{
%f%0		%F%1	unsigned i;
%f%0		%F%1	int ret;
%f%0		%F%1	char buf [128];
%f%0		%F%1	int noOfViolations = 0;
%f%0		%F%1	
%f%0		%F%1	RESET_MD380Tables (tab);
%f%0		%F%1	
%f%0	;
	cFile.incIndent ();
	
	for (i=0; i<recordsMap.count(); i++) {
		if (recordsMap.getAt(i).isReferenced) {
			var String recId = recordsMap.getAt(i).recordId.text;
			var String boundFieldId = %FrecordsMap.getAt(i).%fkeyField%F.fieldId.text%f;
			cFile <%F<%f
				%F%1/*-------------------------------------------------------------------
%f%0				%F%1	%0«recId»%1
%f%0				%F%1-------------------------------------------------------------------*/
%f%0				%F%1for (i=0; i<container->%0«recId»%1_COUNT; i++) {
%f%0				%F%1	ret = %0«recordsMap.getAt(i).keyField.fieldType.getAddLookupTable()»%1 (&tab->TAB_%0«recId»%1, container->%0«recId»%1[i].%0«boundFieldId»%1, i+1);
%f%0				%F%1	if (ret < 0) {
%f%0				%F%1		reportErrorFunc (reportErrorParam, "%0«recId»%1", i, "%0«boundFieldId»%1", "Lookup table overflow");
%f%0				%F%1		noOfViolations++;
%f%0				%F%1		break;
%f%0				%F%1	}
%f%0				%F%1	else if (ret > 0) {
%f%0				%F%1		sprintf (buf, "Dupe entry (already found at line %%d)", ret);
%f%0				%F%1		reportErrorFunc (reportErrorParam, "%0«recId»%1", i, "%0«boundFieldId»%1", buf);
%f%0				%F%1		noOfViolations++;
%f%0				%F%1	}
%f%0				%F%1}
%f%0			;	
		}
	}

	cFile.decIndent ();
	cFile << endl << 
		%F%1	return noOfViolations;
%f%0		%F%1}
%f%0	;
}