lifeset CORE;

phase generateCLI = 40;

String csvFilesStruct = "CSVFileNames";

in phase generateCLI {
	do {
		// Prepare the file names
		var FilePath cFileName;
		var FilePath hFileName;
		cFileName.parse (outputName.text+"_cli");
		hFileName.parse (outputName.text+"_cli");
		cFileName.replaceExtension ("c");
		hFileName.replaceExtension ("h");
		
		// Open the files
		var FileOutStream cFile (cFileName);
		var FileOutStream hFile (hFileName);
		system().msg << "Generating " << cFileName << endl;
		system().msg << "Generating " << hFileName << endl;

		// Write the headers
		cFile << %F
%f			%F%1/* Generated by Macrocoder - do not edit */
%f%0			%F%1#define _CRT_SECURE_NO_WARNINGS
%f%0			%F%1#include "%0«hFileName.%fgetTopNamePart ()%F»%1"
%f%0			%F%1#include <string.h>
%f%0			%F%1#include "binlib.h"
%f%0			%F%1#include "crc.h"
%f%0			%F%1#include <assert.h>
%f%0		;
		
		var String ifndefText = %FhFileName.%fgetTopNamePart ().convertToIdentifier ();
		hFile << %F
%f			%F%1/* Generated by Macrocoder - do not edit */
%f%0			%F%1#ifndef %0«ifndefText»%1
%f%0			%F%1#define %0«ifndefText»%1
%f%0			%F%1
%f%0			%F%1typedef struct {
%f%0			%F%1	const char* parameter;
%f%0			%F%1	const char* recordName;
%f%0			%F%1} CliCommands;
%f%0			%F%1
%f%0			%F%1#define NO_OF_CLI_COMMANDS %0«recordsMap.count ()»%1
%f%0			%F%1extern CliCommands cliCommands[NO_OF_CLI_COMMANDS];
%f%0			%F%1
%f%0		;
		generateCLIFileNamesMap (hFile);
		generateCLIFileNamesMapFuncs (cFile);
		generateCLIParser (hFile, cFile);
		generateCLICommands (cFile);
		
		// Write the footers
		hFile << endl <<
			%F%1#endif
%f%0		%F;%f
	}
	
	shared Void generateCLIFileNamesMap (out TextStream hFile) const;
	shared Void generateCLIFileNamesMapFuncs (out TextStream cFile) const;
	shared Void generateCLIParser (out TextStream hFile, out TextStream cFile) const;
	shared Void generateCLICommands (out TextStream cFile) const;
}	


/*-------------------------------------------------------------------------
	GENERATE THE FUNCTION MAPPING CSV FILE NAMES
-------------------------------------------------------------------------*/
impl generateCLIFileNamesMap {
	hFile << endl <<
		%F%1/* Structure mapping the file names to be used for CSV saving */
%0		%1/* Use INIT_%0«csvFilesStruct»%1 and FREE_%0«csvFilesStruct»%1 */
%0		%1typedef struct {
%0	;
	hFile.%fincIndent ()%F;
	var Int i;
%f	for (i=0; i<recordsMap.count (); i++) {
		hFile << %F%1char* Path_%f%0 << recordsMap.getAt (i).recordId << %F%1;%f%0 << endl;
	}
%F	hFile.%fdecIndent ()%F;
	hFile << 
		%f%1} %0«%FcsvFilesStruct%f»%F%1;
%0		%1
%0		%1/* Initialize a %0«csvFilesStruct»%1 */
%0		%1extern void INIT_%0«csvFilesStruct»%1(%0«csvFilesStruct»%1* fs);
%0		%1
%0		%1/* Free a %0«csvFilesStruct»%1 */
%0		%1extern void FREE_%0«csvFilesStruct»%1(%0«csvFilesStruct»%1* fs);
%0	;
%f}

/*-------------------------------------------------------------------------
	GENERATE THE INIT/FREE FUNCTION FOR MAPPING CSV FILE NAMES
-------------------------------------------------------------------------*/
impl generateCLIFileNamesMapFuncs {
	cFile << endl <<
%F		%1/* Initialize a %0«csvFilesStruct»%1 */
%0		%1void INIT_%0«csvFilesStruct»%1(%0«csvFilesStruct»%1* fs)
%0		%1{
%0		%1	memset (fs, 0, sizeof(*fs));
%0		%1}
%0		%1
%0		%1/* Free a %0«csvFilesStruct»%1 */
%0		%1void FREE_%0«csvFilesStruct»%1(%0«csvFilesStruct»%1* fs)
%0		%1{
%f%0	;
%F	cFile.%fincIndent ()%F;
	var Int i;
%f	for (i=0; i<recordsMap.count (); i++) {
		cFile << %F%1if (fs->Path_%f%0«recordsMap.getAt (i).recordId»%F%1 != NULL) binFree(fs->Path_%f%0«recordsMap.getAt (i).recordId»%F%1);%0 << endl%f;
	}
%F	cFile.%fdecIndent ()%F;
%f	
	cFile << endl <<
		%F%1	memset (fs, 0, sizeof(*fs));%f
%F%0		%1}
%f%0	;		
}

/*-------------------------------------------------------------------------
	GENERATE THE CLI PARAMETERS FUNCTION
-------------------------------------------------------------------------*/
impl generateCLIParser {
	hFile << endl <<
		%F%1#define CLI_PARAMETER_UNKNOWN   0
%f%0		%F%1#define CLI_NOT_ENOUGH_PARAMS  -1
%f%0		%F%1#define CLI_DUPE_PARAMETER     -2
%f%0		%F%1#define CLI_OUT_OF_MEMORY      -3
%f%0		%F%1
%f%0		%F%1/* Executes the parsing of the command line. It returns the number */
%f%0		%F%1/* of parameters consumed from the given position or CLI_xxx in case of error */
%f%0		%F%1extern int ParseCommandLine (%0«csvFilesStruct»%1* fs, char** argv, int argc);
%f%0	%F;
%f	%F
%f	%FcFile << endl <<%f
		%F%1/* Executes the parsing of the command line. It returns the number */
%f%0		%F%1/* of parameters consumed from the given position or CLI_xxx in case of error */
%f%0		%F%1int ParseCommandLine (%0«csvFilesStruct»%1* fs, char** argv, int argc)
%f%0		%F%1{
%f%0		%F%1	unsigned paramCrc;
%f%0		%F%1	char** targetPtr = NULL;
%f%0		%F%1	
%f%0		%F%1	if (argc <= 0) return 0;
%f%0		%F%1	if (strlen (argv[0]) <= 1) return 0;
%f%0		%F%1	if (argv[0][0] != '-') return 0;
%f%0		%F%1	paramCrc = crc32_AddAsciizLowerCase (0, argv[0]+1);
%f%0		%F%1	
%f%0		%F%1	switch (paramCrc) {
%f%0	;
	cFile.incIndent();
	cFile.incIndent();

	var Int i;
	for (i=0; i<recordsMap.count (); i++) {
		var String recordId = recordsMap.getAt(i).recordId.text;
		var String shortName = recordsMap.getAt(i).shortName.text;
		cFile << %F
%f			%F%1/* '-%f%0«shortName»%F%1' for %f%0«recordId»%1 %F*/
%f%0			%F%1case 0x%0«String::formatInt(shortName.getLowerCase().calcCrc32(), 16, 8)»%1: targetPtr = &(fs->Path_%0«%frecordId»%1); break;%F
%f%0		%F;%f
	}

	cFile.decIndent();
%F	cFile.decIndent();
	cFile << endl <<%f
		%F%1	}
%f%0		%F%1	
%f%0		%F%1	/* Check for dupe allocations */
%f%0		%F%1	if ((*targetPtr) != NULL) {
%f%0		%F%1		return CLI_DUPE_PARAMETER;
%f%0		%F%1	}
%f%0		%F%1	
%0		%1	if (argc < 2) {
%f%0		%F%1		return CLI_NOT_ENOUGH_PARAMS;
%f%0		%F%1	}
%f%0		%F%1	
%f%0		%F%1	if (targetPtr) {
%f%0		%F%1		(*targetPtr) = (char*)binAlloc (strlen (argv[1])+1);
%f%0		%F%1		strcpy ((*targetPtr), argv[1]);
%f%0		%F%1		
%f%0		%F%1		return 2;
%f%0		%F%1	}
%f%0		%F%1	else {
%f%0		%F%1		return CLI_PARAMETER_UNKNOWN;
%f%0		%F%1	}
%f%0		%F%1}
%f%0	%F;
%f}

impl generateCLICommands {
	cFile << endl <<
		%F%1CliCommands cliCommands[NO_OF_CLI_COMMANDS] = {
%f%0	%F;
%f	%FcFile.incIndent ();%f
	var Int i;
	for (i=0; i<recordsMap.count(); i++) {
		cFile << %F%1{"-%0«recordsMap.getAt(i).shortName»%1", "%0«recordsMap.getAt(i).recordId»%1"}%0;
%f		%Fif (i+1%f<recordsMap.count()) {cFile << ",";}
		cFile << endl;
	}
	%FcFile.decIndent ();%f
	cFile << %F%1};%0 << endl;%f
}
